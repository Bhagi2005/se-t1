# -*- coding: utf-8 -*-
"""weather_modeling (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pV2T206tYDYDqIGV6KGMKujUHHMXdgiD

# Implement weather modeling using the quadratic solution with hardcoding variables (fixed variable values give in program)bold text
"""

import matplotlib.pyplot as plt
import numpy as np

def quadratic_model(time):
    # Hard-coded coefficients for the quadratic equation
    a = 0.1
    b = -1
    c = 30

    # Quadratic equation representing temperature change
    temperature = a * (time ** 2) + b * time + c
    return temperature

def main():
    # Time values from 0 to 10 (for example)
    time_values = np.linspace(0, 10, 50)

    # Calculate temperatures using hard-coded coefficients
    temperature_hardcoded = quadratic_model(time_values)

    # Plot the results
    plt.plot(time_values, temperature_hardcoded, label='Hard-coded Coefficients')
    plt.xlabel('Time')
    plt.ylabel('Temperature')
    plt.legend()
    plt.title('Weather Modeling with Quadratic Equation (Hard-coded Coefficients)')
    plt.show()

if __name__ == "__main__":
  main()



"""**Implement weather modeling* using the quadratic solution in stages: hard-coding variables**"""

import matplotlib.pyplot as plt
import numpy as np

def quadratic_temperature_model(time):
    # Coefficients for the quadratic equation
    a = 0.02  # Quadratic term coefficient
    b = 1.5   # Linear term coefficient
    c = 20    # Constant term

    # Quadratic equation: T(t) = at^2 + bt + c
    temperature = a * (time ** 2) + b * time + c
    return temperature

# Generate time values from 0 to 50 with step 1
time_values = np.arange(0, 51, 1)

# Calculate temperature values using the quadratic model
temperature_values = quadratic_temperature_model(time_values)

# Plotting the results
plt.plot(time_values, temperature_values, label='Temperature Model')
plt.xlabel('Time')
plt.ylabel('Temperature')
plt.title('Quadratic Temperature Model')
plt.legend()
plt.grid(True)
plt.show()

"""Implement weather modeling* using the quadratic solution in stages: hard-coding variables
keyboard input
"""

#Implement weather modeling* using the quadratic solution in stages: hard-coding variables keyboard input

import matplotlib.pyplot as plt
import numpy as np

def quadratic_temperature_model(time, a, b, c):
    # Quadratic equation: T(t) = at^2 + bt + c
    temperature = a * (time ** 2) + b * time + c
    return temperature

# Get user input for coefficients
a = float(input("Enter the coefficient for the quadratic term (a): "))
b = float(input("Enter the coefficient for the linear term (b): "))
c = float(input("Enter the constant term (c): "))

# Generate time values from 0 to 50 with step 1
time_values = np.arange(0, 51, 1)

# Calculate temperature values using the quadratic model
temperature_values = quadratic_temperature_model(time_values, a, b, c)

# Plotting the results
plt.plot(time_values, temperature_values, label='Temperature Model')
plt.xlabel('Time')
plt.ylabel('Temperature')
plt.title('Quadratic Temperature Model')
plt.legend()
plt.grid(True)
plt.show()

"""Implement weather modeling* using the quadratic solution in stages: hard-coding variables multiple sets of inputs."""

#Implement weather modeling* using the quadratic solution in stages: hard-coding variables read from a file

import matplotlib.pyplot as plt
import numpy as np

def quadratic_temperature_model(time, a, b, c):
    # Quadratic equation: T(t) = at^2 + bt + c
    temperature = a * (time ** 2) + b * time + c
    return temperature

# List of coefficient sets (a, b, c)
coefficients_list = [
    (0.02, 1.5, 20),
    (0.01, 2, 18),
    (0.03, 1, 25),
]

# Generate time values from 0 to 50 with step 1
time_values = np.arange(0, 51, 1)

# Plotting the results for each set of coefficients
for i, (a, b, c) in enumerate(coefficients_list):
    temperature_values = quadratic_temperature_model(time_values, a, b, c)
    label = f'Set {i + 1}: a={a}, b={b}, c={c}'
    plt.plot(time_values, temperature_values, label=label)

# Plotting details
plt.xlabel('Time')
plt.ylabel('Temperature')
plt.title('Quadratic Temperature Model with Multiple Sets of Coefficients')
plt.legend()
plt.grid(True)
plt.show()

""" **Implement weather modeling* using the quadratic solution in stages: hard-coding variables keyboard input**"""

import matplotlib.pyplot as plt
import numpy as np

def quadratic_model(time, a, b, c):
    # Quadratic equation representing temperature change
    temperature = a * (time ** 2) + b * time + c
    return temperature

def main():
    # Hard-coded coefficients for the quadratic equation
    a_hardcoded = 0.1
    b_hardcoded = -1
    c_hardcoded = 30

    # Input coefficients from the user
    a_input = float(input("Enter coefficient a: "))
    b_input = float(input("Enter coefficient b: "))
    c_input = float(input("Enter coefficient c: "))

    # Time values from 0 to 10 (for example)
    time_values = np.linspace(0, 10, 100)

    # Calculate temperatures using both hard-coded and user-input coefficients
    temperature_hardcoded = quadratic_model(time_values, a_hardcoded, b_hardcoded, c_hardcoded)
    temperature_input = quadratic_model(time_values, a_input, b_input, c_input)

    # Plot the results
    plt.plot(time_values, temperature_hardcoded, label='Hard-coded Coefficients')
    plt.plot(time_values, temperature_input, label='User Input Coefficients')
    plt.xlabel('Time')
    plt.ylabel('Temperature')
    plt.legend()
    plt.title('Weather Modeling with Quadratic Equation')
    plt.show()

if __name__ == "__main__":
    main()

import matplotlib.pyplot as plt
import numpy as np

def quadratic_model(time, a, b, c):
  # Hard-coded coefficients for the quadratic equation
    a = 0.1
    b = -1
    c = 30
  # Quadratic equation representing temperature change
    temperature = a * (time ** 2) + b * time + c
    return temperature

  # Time values from 0 to 10 (for example)
    time_values = np.linspace(0, 10, 100)

  # Calculate temperatures using hard-coded coefficients
    temperature_hardcoded = quadratic_model(time_values)

  # Plot the results
    plt.plot(time_values, temperature_hardcoded, label='Hard-coded Coefficients')
    plt.xlabel('Time')
    plt.ylabel('Temperature')
    plt.legend()
    plt.title('Weather Modeling with Quadratic Equation (Hard-coded Coefficients)')
    plt.show()

"""**Implement weather modeling* using the quadratic solution in stages: hard-coding variables for a single set of input**"""

import matplotlib.pyplot as plt
import numpy as np

def quadratic_model(time, a, b, c):
    # Quadratic equation representing temperature change
    temperature = a * (time ** 2) + b * time + c
    return temperature

def main():
    # Hard-coded coefficients for the quadratic equation
    a = 0.1
    b = -1
    c = 30

    # Time values from 0 to 10 (for example)
    time_values = np.linspace(0, 10, 100)

    # Calculate temperatures using hard-coded coefficients
    temperature_hardcoded = quadratic_model(time_values, a, b, c)

    # Plot the results
    plt.plot(time_values, temperature_hardcoded, label='Hard-coded Coefficients')
    plt.xlabel('Time')
    plt.ylabel('Temperature')
    plt.legend()
    plt.title('Weather Modeling with Quadratic Equation (Hard-coded Coefficients)')
    plt.show()

if __name__ == "__main__":
    main()

